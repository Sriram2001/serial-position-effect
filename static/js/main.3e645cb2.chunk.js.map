{"version":3,"sources":["assets/memory.png","common.js","steps/Intro.js","steps/Recall.js","steps/Remember.js","steps/Finish.js","Game.js","App.js","index.js"],"names":["module","exports","shuffleArray","array","i","length","j","Math","floor","random","temp","getAnimals","animalsList","selected","slice","randomList","Intro","next","clearList","timeC","setTimeC","useEffect","className","src","Memory","alt","style","width","max","min","value","size","variant","onChange","changeEvent","target","onClick","xmlns","viewBox","fill","fillRule","d","clipRule","Recall","addAnimal","selectedAnimals","useState","listening","setListening","commands","map","a","command","callback","animal","isFuzzyMatch","toggle","useSpeechRecognition","SpeechRecognition","browserSupportsSpeechRecognition","checked","onlabel","offlabel","onstyle","startListening","continuous","stopListening","idx","key","includes","cursor","RememberStage","maxTime","React","time","setTime","timer","setTimeout","clearTimeout","getClass","Finish","allAnimals","message","outside","inside","forEach","every","some","stroke","strokeLinecap","strokeLinejoin","strokeWidth","animals","randomAnimals","skip","step","push","id","window","scrollTo","Game","setSelected","list","filter","e","alert","onNext","render","App","minHeight","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.3e645cb2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/memory.b17ce998.png\";","import animalsList from \"./animals.json\";\n\nfunction shuffleArray(array) {\n  for (var i = array.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n}\n\nexport function getAnimals() {\n  shuffleArray(animalsList);\n  const selected = animalsList.slice(0, 8);\n  let randomList = animalsList.slice(0, 16);\n  shuffleArray(randomList);\n  return [selected, randomList];\n}\n","import React, { useEffect } from \"react\";\nimport Memory from \"../assets/memory.png\";\nimport RangeSlider from \"react-bootstrap-range-slider\";\n\nexport default function Intro({ next, clearList, timeC, setTimeC }) {\n  useEffect(() => {\n    clearList();\n  }, []); // eslint-disable-line\n  return (\n    <div className=\"d-flex flex-column align-items-center container\">\n      <h1 className=\"text-center display-4\">\n        Serial Position Effect Simulator\n      </h1>\n      <img src={Memory} alt=\"Logo\" style={{ width: \"200px\" }} />\n      <h2 className=\"mt-3\">Rules:</h2>\n      <ul className=\"mb-3\">\n        <li>On the next screen, a list of animals will be shown</li>\n        <li>You will be given some time to remember this list of animals</li>\n        <li>A timer will show the time elapsed</li>\n        <li>After the time ends, you will be asked to recall the animals</li>\n        <li>\n          While recalling the animals, if your browser supports it, you might be\n          given an option to use speech recognition to select the animals\n        </li>\n        <li>\n          This feature is experimental and is only guaranteed to work well with\n          the Google Chrome browser. The option to toggle it on will be shown if your browser supports the feature.\n        </li>\n        <li>Choose how much time you want to give yourself to remember the animals and click start when you are ready to begin!</li>\n      </ul>\n\n      <p className=\"h4 mt-1\">Time to remember animals:</p>\n      <p className=\"h3\">{timeC} seconds</p>\n      <RangeSlider\n        max={12}\n        min={1}\n        className=\"mt-n1\"\n        value={timeC}\n        size=\"sm\"\n        variant=\"success\"\n        onChange={(changeEvent) => setTimeC(changeEvent.target.value)}\n      />\n      <button\n        className=\"btn btn-success btn-lg d-flex align-items-center my-3\"\n        onClick={next}\n      >\n        Start{\" \"}\n        <span className=\"ml-2\" style={{ width: \"15px\" }}>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 20 20\"\n            fill=\"currentColor\"\n            className=\"d-block\"\n          >\n            <path\n              fillRule=\"evenodd\"\n              d=\"M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z\"\n              clipRule=\"evenodd\"\n            />\n          </svg>\n        </span>\n      </button>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport SpeechRecognition, {\n  useSpeechRecognition\n} from \"react-speech-recognition\";\nimport BootstrapSwitchButton from \"bootstrap-switch-button-react\";\n\nexport default function Recall({\n  addAnimal,\n  next,\n  animalsList,\n  selectedAnimals\n}) {\n  const [listening, setListening] = useState(false);\n\n  const commands = animalsList.map((a) => {\n    return {\n      command: `${a}`,\n      callback: (animal) => {\n        addAnimal(a);\n      },\n      isFuzzyMatch: true\n    };\n  });\n\n  let toggle = \"\";\n\n  useSpeechRecognition({ commands });\n  if (SpeechRecognition.browserSupportsSpeechRecognition()) {\n    toggle = (\n      <>\n        <p className=\"h4 mr-2\">Speech Recognition:</p>\n\n        <BootstrapSwitchButton\n          checked={listening}\n          onlabel=\"ON\"\n          offlabel=\"OFF\"\n          onstyle=\"success\"\n          onChange={(checked) => {\n            if (checked) {\n              SpeechRecognition.startListening({ continuous: true });\n            } else {\n              SpeechRecognition.stopListening();\n            }\n            setListening(checked);\n          }}\n        />\n      </>\n    );\n  }\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"text-center my-3\">Select the animals: </h1>\n      <p className=\"text-center\">\n        There is a list of animals below. Select all of the ones that you\n        remember from the list shown before.\n      </p>\n\n      <div className=\"row mb-2 d-flex justify-content-center\">{toggle}</div>\n      <div className=\"row ml-0\">\n        <ul className=\"list-group col-md-6\">\n          {animalsList.slice(0, animalsList.length / 2).map((animal, idx) => {\n            return (\n              <li\n                key={idx}\n                className={`list-group-item ${\n                  selectedAnimals.includes(animal) && \"list-group-item-primary\"\n                }`}\n                style={{ cursor: \"pointer\" }}\n                onClick={() => addAnimal(animal)}\n              >\n                {animal}\n              </li>\n            );\n          })}\n        </ul>\n        <ul className=\"list-group col-md-6\">\n          {animalsList.slice(animalsList.length / 2).map((animal, idx) => {\n            return (\n              <li\n                key={idx}\n                className={`list-group-item ${\n                  selectedAnimals.includes(animal) && \"list-group-item-primary\"\n                }`}\n                style={{ cursor: \"pointer\" }}\n                onClick={() => addAnimal(animal)}\n              >\n                {animal}\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n      <button\n        className=\"btn btn-primary d-flex align-items-center my-3\"\n        onClick={next}\n      >\n        Finish{\" \"}\n        <span className=\"ml-2\" style={{ width: \"15px\" }}>\n          <svg\n            className=\"d-block\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 20 20\"\n            fill=\"currentColor\"\n          >\n            <path d=\"M4.555 5.168A1 1 0 003 6v8a1 1 0 001.555.832L10 11.202V14a1 1 0 001.555.832l6-4a1 1 0 000-1.664l-6-4A1 1 0 0010 6v2.798l-5.445-3.63z\" />\n          </svg>\n        </span>\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function RememberStage({ animalsList, next, maxTime }) {\n  const [time, setTime] = React.useState(maxTime);\n  React.useEffect(() => {\n    let timer = null;\n    if (time > 0) {\n      timer = setTimeout(() => setTime((time) => time - 1), 1000);\n    } else {\n      next();\n    }\n    return () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    };\n  }, [time, next]);\n  const getClass = (time) => {\n    if (time < 3) return \"text-danger\";\n    if (time < 6) return \"text-warning\";\n    return \"text-success\";\n  };\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"my-3 text-center\">Remember the following animals:</h1>\n      <div className=\"row ml-0\">\n        <div className=\"col-md-6 text-center h-100 my-auto\">\n          <h4>\n            Time left: <span className={`h2 ${getClass(time)}`}>{time}</span>s\n          </h4>\n        </div>\n        <ul className=\"col-md-4 list-group\">\n          {animalsList.map((animal, idx) => (\n            <li key={idx} className=\"list-group-item\">\n              {animal}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function Finish({ selectedAnimals, allAnimals, next }) {\n  let message = \"\";\n  let outside = 0;\n  let inside = 0;\n  allAnimals.forEach((animal, idx) => {\n    if (selectedAnimals.includes(animal)) {\n      if (idx >= 3 && idx < 6) inside += 1;\n      else outside += 1;\n    }\n  });\n\n  if (inside < outside) {\n    message = (\n      <p>\n        You have recalled more elements in the boundary of the array than in the\n        interior. So, the serial position has been effective.\n      </p>\n    );\n  } else if (outside !== inside) {\n    message = (\n      <p>\n        You have recalled more elements in the interior of the array than in the\n        boundary. So, the serial position has not been effective.\n      </p>\n    );\n  }\n  if (allAnimals.every((animal) => selectedAnimals.includes(animal))) {\n    message = (\n      <p>\n        You have recalled all the animals and your memory is very good. So, the\n        serial position efect does not apply.\n      </p>\n    );\n  }\n  if (selectedAnimals.length > allAnimals.length) {\n    message = (\n      <p>\n        You have selected more than 8 elements. So, the serial position efect\n        does not apply. Please retry the simulation\n      </p>\n    );\n  }\n  if (\n    selectedAnimals.length === 0 ||\n    !allAnimals.some((animal) => selectedAnimals.includes(animal))\n  ) {\n    message = (\n      <p>You have not recalled any animal correctly. Do you want to retry?</p>\n    );\n  }\n  return (\n    <div className=\"container\">\n      <h1 className=\"my-3 text-center\">Result:</h1>\n      <div className=\"text-center\">{message}</div>\n      <div className=\"row no-gutters\">\n        <ul className=\"list-group col-md-8 mx-auto\">\n          {allAnimals.map((animal, idx) => {\n            return (\n              <li\n                key={idx}\n                className={`list-group-item ${\n                  selectedAnimals.includes(animal) && \"list-group-item-success\"\n                }`}\n              >\n                {animal}\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n      <button\n        className=\"btn btn-success mx-auto d-flex align-items-center my-3\"\n        onClick={next}\n      >\n        Restart\n        <span className=\"ml-2\" style={{ width: \"20px\" }}>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke=\"currentColor\"\n            className=\"d-block\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"\n            />\n          </svg>\n        </span>\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Wizard, Steps, Step } from \"react-albus\";\nimport { getAnimals } from \"./common\";\nimport Intro from \"./steps/Intro\";\nimport Recall from \"./steps/Recall\";\nimport RememberStage from \"./steps/Remember\";\nimport Finish from \"./steps/Finish\";\n\nlet [animals, randomAnimals] = getAnimals();\nconst skip = ({ step, push }) => {\n  switch (step.id) {\n    case \"finish\": {\n      [animals, randomAnimals] = getAnimals();\n      window.scrollTo(0, 0);\n      push(\"start\");\n      break;\n    }\n    default: {\n      window.scrollTo(0, 0);\n      push();\n    }\n  }\n};\n\nconst Game = () => {\n  const [timeC, setTimeC] = React.useState(8);\n  const [selectedAnimals, setSelected] = React.useState([]);\n\n  const addAnimal = (animal) => {\n    setSelected((list) => {\n      if (list.includes(animal)) {\n        return list.filter((e) => e !== animal);\n      } else if (list.length === animals.length) {\n        alert(\n          \"You have selected the maximum number of animals. Please click again on a selected animal to unselect it.\"\n        );\n        return list;\n      } else return [...list, animal];\n    });\n  };\n  return (\n    <Wizard onNext={skip}>\n      <Steps>\n        <Step\n          id=\"start\"\n          render={({ next }) => (\n            <Intro\n              next={next}\n              clearList={() => setSelected([])}\n              timeC={timeC}\n              setTimeC={setTimeC}\n            />\n          )}\n        />\n        <Step\n          id=\"remember\"\n          render={({ next }) => (\n            <RememberStage next={next} animalsList={animals} maxTime={timeC} />\n          )}\n        />\n        <Step\n          id=\"recall\"\n          render={({ next }) => (\n            <Recall\n              next={next}\n              selectedAnimals={selectedAnimals}\n              addAnimal={addAnimal}\n              animalsList={randomAnimals}\n            />\n          )}\n        />\n        <Step\n          id=\"finish\"\n          render={({ next }) => (\n            <Finish\n              next={next}\n              allAnimals={animals}\n              selectedAnimals={selectedAnimals}\n            />\n          )}\n        />\n      </Steps>\n    </Wizard>\n  );\n};\n\nexport default Game;\n","import React from \"react\";\nimport Game from \"./Game\";\n\nexport default function App() {\n  return (\n    <div\n      className=\"d-flex flex-column w-100 justify-content-center align-items-center\"\n      style={{ minHeight: \"100vh\" }}\n    >\n      <Game />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}